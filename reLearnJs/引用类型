引用类型的值,又叫对象,是引用类型的一个实例.
在js中,引用类型是一种数据结构,用于将数据和功能组织到一起,在别的语言叫做类.


Object 类型
var obj = new Object(); var obj = {};
可以用.和[]访问一个对象的属性和方法.不过用[]这种方式,必须传入一个字符串而已.

Array 类型.
数据的有序列表.js中的数组,可以保存任何类型的数据.并且,js中的数组,是可以动态调整大小的,并且可以随着数据的添加自动增长用来容纳新增数据.;

创建数组: 可以使用字面量的方法. var colors = [], var names = [1, 2, ,3]
访问数据[index]. 如果,index小于数组的长度,那么就会返回对应项的值,如果超过了,数组就会自动增加到该索引应该在的长度.lendth的值也会随之变化.
length不是一个只读的数据,可以更改,改小了就是删减多出来的内容,改大了就是增加,增加的部分就是undefined.
所以,如果想要在数组后面增加数据的话,可以一直用[length] = sth这样的方式赋值.
检测数组可以用Array.isArray()这个方法.

其他的方法没有看,用的时候在看吧

Date类型
没看

RegExp类型
没看


Function类型
函数就是独享,每个函数都是Function类型的实例,都有属性和方法.由于函数是对象,所以,函数名也就是一个指向函数对象的指针,不会是和某个函数绑定.
也就是
function sum(num1, num2) {
    return num1 + num2
}
var sum = function(num1, num2) {
    return num1 + num2;
}
这两者,没有什么差别.因为函数名仅仅是个指针,所以它也可以被传递,赋值.而知道函数名是指针,那么也就知道了为什么没有重载了.
写两个都是sum的函数,虽然参数不同,其实,是sum这个变量被赋值了两次.后一次,就覆盖了前一次的值而已.

## 函数声明和函数表达式
函数声明 
function sum(){

}
函数表达式 
var sum = function() {

}

有什么区别.解析器,会率先读取函数声明,并且使其在执行代码之前可以访问,至于函数表达式,必须等到解析器执行到它所在的代码行,才能真正被解释执行.这就是为什么很多时候,函数声明在后,但是却能在前面使用这个函数.

函数的内部属性.
arguments 类数组对象,包含着所有传入函数的所有参数.这个对象有个callee属性,是一个指针,指向拥有这个arguments对象的函数.
this. 引用的是函数局已执行的环境对象.需要注意的是,this 的值,在调用函数之前,是不确定的.因此,this可能会在代码执行过程中,引用不同的对象.函数的名称,仅仅是一个包含指针的变量而已,在不同的环境下,可能是指向了同一个函数.比如,定义了一个函数sayHi,然后赋值给不同的对象,那么这个时候的this,就是各不同的对象了.这个不容的对象,甚至可以不是一个类型.
length 表示,函数希望接受的命名函数的个数.

函数的call, apply 和bind 函数.





