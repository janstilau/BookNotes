js的变量是松散类型的,弱类型,就是可以用来保存任何类型的数据.换句话来说,每个变量仅仅是一个用于保存值的占位符而已.定义变量的时候用var操作符,后面加变量名.
var message; message的值是undefined.
var message = "hi"; message的值是"hi",但是随后message = 100, 会将值改为100,类型也变为number.
用var定义的变量,将成为该变量的作用域中的局部变量.而省略了var,可以将这个变量变成为全局变量.但是,这样不推荐这样做.

## 数据类型
Undefined
Null
Boolean
Number
String
Object 本质上,是一组无序的键值对组成的.
为什么别的语言,要有那么多的类型,而js只有这六中类型呢,细细想一下,别的语言,复杂的类型,仅仅是这些简单类型的组合而已.那么也就是,其他语言里面的类这个概念,就是属性和方法的集合.这在js中都可以实现的.

typeof是负责检测变量的数据类型的.
undefined 未定义 boolean 布尔值 string 字符串 number 数值 object 对象或者null function 函数.
typeof 是一个操作符,而不是函数.

### Undefined 类型
var message = undefi;  效果等同于var message;
一般来说,不会显示的设置undefined,undefined的主要的作用,是用来比较.

### Null 类型
Null类型,只有一个值,就是null.null值表示空对象指针,所以使用typeof null的时候,返回的是object.
如果定义的变量,将来时要用于保存对象,那么最好是将这个变量初始化成为null而不是其他的值.这样,只要直接检查null值就知道对象是否已经被赋值了. car === null
null的作用就是,变量应该保存的是一个对象,然后赋值为空引用.是null,就确定了这个值是一个object了,只不过是现在没有值,这和赋值为undefined是不一样的.

### Boolean 类型
只有true 和 false 两个值. 这两个值,是区分大小写的.js中所有的其他类型,都能够转换成为这两个值.
var message = "hi"; var booleanValue = Bollean(message); 那么bolleanValue 就是true了.
转换规则是 
String 非空true,空串false.
Number 非零值true, 0和NaN是false
Object 任何对象true, null是false
Undefined 就是false.
这些转换规则什么时候会用到呢,经常用到了,就是在if判断里面,我们不会特地的写Bollean(value),而是if(value)

### Number类型
可以同时表示整数和浮点数.
var intNum = 55;
var octalNum = 070; 第一位必须是0,如果数字超出了范围,例如出现了9,那么前导0被忽略,这个值被认为是10进制
var hexNum = 0xA; 前面必须是0x开头.
因为浮点数的空间是整数的两倍,所以js会尽量转为整数值保存.如果小数位没有任何数字,那么就是整数.如果,浮点数就是一个整数,例如,1.0,那这个值被保存为整数,这和之前的语言是不一样的.
var floatNum = 1.1;
var floatNum = 3.13412e10;科学表示法.
浮点数最大的问题,还是精度的问题,永远不要做 3.3 + 0.1 === 3.4 这样的测试

Number.MAX_VALUE,Number.MIN_SAFE_INTEGER 在这个类里面,有着专门的属性进行存储了.如果某个值,超过了这些值,那么这个值就会被转换成为Number.POSITIVE_INFINITY或者负无穷.无穷是不能够参与计算的.Number专门有isFinite的函数进行验证.

Nan,就是not a number. 这个值表示一个本来应该返回数值的操作数没有返回值的情况.例如,除以0,其他的变成语言,除0都会终止,但是js中,返回Nan.
1. 任何涉及nan的操作都会返回nan. 
2. nan和任何值都不相等,包括和nan的比较..
所以,判断nan的时候,用到isNan的函数.这个函数接口任意类型的参数,如果可以转为数值,那么就返回false,不能就返回true.
当isNan作用于对象的时候,首先调用对象的valueOf方法,尝试转换返回值,如果不能,就调用对象的toString方法,尝试转换返回值.

#### 数值转换.
Number(). parseInt(), parseFloat() 
第一个Number可以把任意的对象转换成为数值,后面则是转换字符串用的.
Number 的 转换规则
Boolean 值 true 1 false 0;
Number 值, 就是原值
null 值, 返回 0
undefined, 返回Nan
字符串的话:
    如果只有数字, 则转换为相应的数值.
    如果包含进制,如ox这些,也转换为10进制数值.
    如果空串,则为0
    如果包含其他的字符,则返回Nan
对象的话,首先调用valueOf方法,然后对返回值调用上述规则,如果结果是Nan,则调用toString方法,再次转换一次. 

因为Number 在处理字符串的时候,没有复杂的机制,所以,有了parseInt和parseFloat函数.这两个函数,更多的是看是否符合数值的模式.
1. 忽略前面的空格,如果第一个字符不是数字或者符号,但会Nan. 所以,如果是空串的话,返回的是Nan.Number可是返回0的. 
2. 然后,解析字符串,直到第一个非数字.所以,1234blue会成为1234数字,22.3用parseInt的话,是22. parseFloat的话就是22.3.
3. 如果是0,或者0x开头的,也能当成对应的进制格式进行处理.返回10进制的数字.

parseInt有着第二个参数,就是设置进制.parseInt(070)在不同的js的版本中,原来的版本认为是8进制,后来的版本认为是10进制.所以,最保险的还是在第二个参数中指明.


## String类型
表示由0个或者多个16位unicode组成的字符序列.用双引号,单引号都可以.
1. 转义字符.用于表示非打印字符,或者有其他用途的字符.
\xnn,用16进制表示的字符,\x41表示A,\unnn,用16进制表示的unicode.\u03a3表示∑.
这些字符,在字符串中,会被当做是一个字符.
任何字符串的长度,都可以用length来方位.

2. 字符串的贴点.
<1>不可变.我们程序中改变字符串的操作,都是用了一个新的字符串填充遍历而已.
var lange = "jave";
lang = lange + "script";
中间后台会有销毁和重新生成javescript字符串的过程.
<2>转换为字符串.
toStirng().除了null,和undefined,都有这个方法.
String(). null返回"null",undefined返回"undefined",其他的调用toString()方法.
+ 加号操作符.

## object类型.
js中的对象,其实就是一组数据和功能的集合而已.
var o = new Object();
在js中,Object类型,是所有它的实例的基础,换句话说,object类型,所具有的任何属性和方法也同样存在更具体的对象里面.
constructor: 创建当前对象的函数.
hasOwnProperty(propertyName). 检查这个属性在当前对象实例中(而不是实例的原型中)存在.propertyName必须是字符串形式.
isPrototypeOf(object). 检查对象是否是传入对象的原型.
propertyIsEnumerable(propertyName). 用于检查这个属性,是否可以用for-in语句进行遍历操作.
toLocaleString(), toString() 返回对象的字符串表示
valueOf() 返回对象的字符串,数值或者布尔表示,通常和toStirng()方法返回值相同.

# 操作符

++, -- 
和c语言的定义和效果一样,不过js这里,这些操作符可以用在任何类型上.
字符串: 先转化成为数字,然后进行操作.如果不能转化,则返回Nan
布尔值:false为0,然后操作,true为1,然后操作.
浮点数:就是+1,-1. js中浮点数可以++,--了.
对象:显示调用valueOf,然后操作,如果结果是Nan,那么toString(),然后操作.

+ , -  (单运算符)
和c语言一样,特殊的还是在用于非数值的时候.
在面对非数值的变量的时候,会用Number()这个函数将这个变量进行转化.对象的话,也是先valueOf,或者toString这样.(注意,这里是单运算符,不是加号.)也就是这个运算符可以用在类型的转化.

位运算符
用的很少,和C基本一样,没仔细看.

布尔运算符
! 
一定会返回一个布尔值.首先会将操作数变成一个布尔值,然后翻转.
将操作数变成布尔值的过程,就是之前的Boolean的过程.
underscore里面有!!的写法,这其实是模拟Boolean的转型的过程.

&&操作符
和c一样,但是,如果有一个操作数不是布尔值,不一定返回布尔值了就.
如果,第一个数是true的结果(包括字符串有值,是个对象),那么就返回第二个对象.可以是布尔,也能是对象,字符串等.
如果,第一个数是false的结果(包括null,undefined,Nan), 那就返回第一个对象.
||操作符和上面刚好相反,第一个是false的结果,则返回第二个对象,第一个是true的结果,则返回第一个对象.
||操作符有个常用的地方,就是
var value = preferredObjact || defaultvalue. 如果preferredObjact为null的话,就会设置为默认值,不是null,就设置为preferedObject的值.


乘法.除法.取模.
还是非数值的转化.用Number()先转化,然后进行操作.
在计算的时候,有对于无穷,和Nan的规则,用到时再查.


加法
对于数值,还是有很多对于无穷和Nan的规则.
但是加法最应该注意的是字符串,它会将字符串进行拼接,并且在出现了字符串的情况下,其他的操作数也会优先变成字符串然后拼接.用的就是toString.如果是null,undefined,那么转换成为就是null,undefined. 
如果想要求得 a(1) + b(2) is 3 这样的结果,那么就应该在3的位置这样写(a+b),也就是在()里面先把结果计算出来.

减法
减法就和别的一样,是数值优先,当有不是数值的情况下,优先转化为数值.


关系<>=
还是优先数值,如果有数值的情况下,会全部转换为数值后进行比较.如果,都是字符串,则会比较字符出现的位置.

相等运算符
== ,!= 这些,会将操作数进行类型转化,然后比较转化后的值.
数值优先.也就是,如果一个数值,一个不是,优先转化数值.
=== 和 !== 则不会进行数据类型转化,如果数据类型本身就不一样,那就是不相等.



# 语句
语句基本和C一样,没有细看.

# 函数
js中的函数,都有返回值,当没有写return的时候,返回的是undefined.
js中的函数,没有重载的概念.
js中函数可以接受任意多个参数,因为js中参数是用一个数组表示的,函数的内部可以通过arguments来访问这个数组.
也就是说,我们可以用参数名,也可以用arguments来访问形参.js中,没有函数签名这个东西,其他的语言,函数调用的时候,要和函数签名一致.js中没有这个.如果传进来的参数不够,那么没有赋值的形参就是undefined.在函数内部,可以对arguments的length进行判断,来判断,到底传进多少参数来.也可以根据这个,在函数内部提供参数的默认值.argument的值,只和实际调用的时候传递的参数有关,和定义的时候的写的形参没有关系.

而函数重载,是和函数签名相关的.例如add(int a) 和add(int a, int b)这两个函数,签名不一样,调用的时候,根据实参的类型和个数,可以确定不同的函数.但是js中没有函数签名的概念,也就没有重载的机制.









