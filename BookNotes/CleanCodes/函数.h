//
//  函数.h
//  BookNotes
//
//  Created by jansti on 2017/9/3.
//  Copyright © 2017年 jansti. All rights reserved.
//

#ifndef ___h
#define ___h

/*
    函数.
 1 短小.真理.
    函数20行封顶最佳(??)
    if,else,while 语句中的代码,应该只有一行,该行应该是一个函数的调用语句.不然能够函数的短小,而且,因为块内函数的调用拥有说明性的名称,
 从而增加了文档上的价值.
    这也意味着,函数,不应该大到足以容纳嵌套结构.所以函数的缩进不应该多于一层或者两层.这样的函数便于阅读和理解.(??? 这样,平时写的函数就分化成为了好几个函数了,会不会有函数爆炸)
 2. 只做一件事.
    函数应该做好一件事,并且,只做这一件事.
 3. 每个函数一个抽象层级
    向下规则:程序读起来就像一系列的to起头的段落,每一个段落都只描述当前的抽象层级,并且引用下一个抽象层级的后续段落.
    要想A,就得B,然后C,然后D.
    要想B,就得B1,然后B2,然后B3.
    要想B1,就得B11,然后B12......
 4. switch
    对于switch,只出现一次,就是创建多态对象,并且隐藏在某个继承关系中,在系统其它部分看不到.当然,就事论事,作者也经常违反.
 5. 使用描述性的名称.
    好名称的价值怎么好评都不过分.
    函数越短小,功能越集中,就越能便于取一个好名字.
    长而具有描述的名称,比短而费解的名称要好.长而具有描述的名称,比描述性的长注释要好.
    选择描述性的名称,能够理清你关于模块的设计思路,帮你改进.命名方式要保持一致,使用和模块名一致的短句,名词,动词.
    创建网页, 创建网页数据, 创建网页视图, 创建网页修饰.
 6. 函数参数.
    理想的参数数量是0,然后是1, 2, 尽量避免3或者3以上.有足够特殊的理由才能用多参数代码.
    参数,和函数名处在了不同的抽象层级,要求你理解目前不太重要的细节.输出参数更是让函数的完整性开了个后门.
    对于测试,要保证所有参数组合都正确的测试用例也很难.
    1. 单个参数 
        操作某一数据然后返回,或者完成某些功能.例如event处理函数.尽量用返回值处理,而不是输出参数的形式.(??但是现在普遍都是传入指针,
而直接修改指针里的内容,难道返回这个指针)
    2. 标示参数 丑! 有了标示参数,就是在说,这个函数不止做一件事.
    3. 二元函数.
    4. 三元函数. 尽量避免
    5. 参数对象. 如果需要过多的参数,说明有一些参数要封装起来. makeCircle(x,y,r) 和 makeCircle(point, r)
        通过构建对象,减少参数数量,被封装的参数在一起,往往可以传递某些概念.例如,xy 可以组合成为点.
    6. 动词和关键字.  
        对于函数和参数,应该很好地体现出动名词的关系.例如,write(String name);
        将参数的名称编码到函数名里,可以减少记忆参数的顺序的负担.例如writeNameAndAge(String name, int age)
 7. 没有副作用.
    副作用是一种谎言.函数,承诺只做一件事,但是还会有被其他藏起来的事.
    副作用,容易造成时序性的耦合.
    例如触发器的propertyMap的代码里面,判断了如果mProperties是空,就进行初始化的操作.这里,其实是代码放置问题,应该在构造函数里面,就
 调用initProperties的函数.initProperties这个函数,改变了mProperties的值.如果,这个函数还有别的操作,比如进行了某些值的reset操作,
 那么propertyMap就有了副作用.很有可能,mproperty是空,但是那个值在别的地方已经有值了.这种情况其实很常见.
    为什么会出现这种情况,为什么propertyMap会有副作用. 其实还是代码逻辑有问题,initProperty的函数,应该就放在构造函数里面.但是有的时候,
 我们会有某些值无效不能执行某些操作的情况.例如,这个对象被reset过了,所有数据清空了.那么,在这个对象再一次有效的时候,比如有一个index值被
 传递过来,这个setIndex里面,应该调用initProperties的操作.而不应该放到proeprtyMap里面.
 
 8. 输出参数
    函数大部分是输入的,如果有一个输出参数,必须去查看函数原型才能知道到底这个函数什么意思.面向对象的程序设计,this已经是默认的输出参数了.
 所以 void appendFooter(StringBuffter report), 不然report.appendFooter来的简单明了.
    应该避免输出参数,如果函数必须要修改某种状态,那就修改所属对象的状态吧.
 
 9. 分隔执行或者询问
    函数要做什么事,就回答什么事,不可得兼.函数修改状态,或者返回对象信息,两样都干的话,会导致混乱.
    set(String key, id value);
    if(set("userName", @"1")). 
    这样可以理解为,设置userName为1, 也可以理解为,是否之前设置过userName为1了,是个返回状态的意思.
 
 10. 使用异常代替错误码
    从指令函数里返回错误码,轻微的违反了上面的规则,但是,根据状态吗进行处理,会导致很多的if判断,导致结构越来越复杂.而用异常,可以让错误的处里
 ,在主代码逻辑之外. 而异常的处理,应该用函数进行包装.try应该是函数的第一行代码,catch之后应该没有别的代码.包裹他们的函数,就是执行try之内
 的代码,如果有错就错误处理.
 
 11. 先写代码,然后在重构,不要一上来就按照规则写代码.那样什么都写不出来.
 
 
 
 
 
 
 
 */
#endif /* ___h */
