//
//  格式.h
//  BookNotes
//
//  Created by jansti on 2017/9/4.
//  Copyright © 2017年 jansti. All rights reserved.
//

#ifndef ___h
#define ___h
/*

 格式不是不重要的事情,格式就是沟通.
 今天的功能,明天可能就被修改了,但是,代码的可读性可能对修改行为产生影响.
 1 垂直格式.
    每一个空白行都是线索,标示出新的独立概念.减少空白行,代码就变成一坨..
    相对的,紧密的关系,就应该在一起,添加多余的空白行就打断人的思路.
 
    变量声明,应该尽量靠近使用的位置.循环中的控制变量,应该总是在循环语句中.
    成员变量,应该统一在一个地方声明.
 
    相关函数,如果一个地方调用了另一个函数,那么应该放在一起.这样,阅读的时候
 就能有着自然的顺序.读者可以相信,函数声明就在后面出现.
    被调用的函数,应该出现在调用函数的后面.
    概念相关的函数,应该放在一起.相关越强,距离越短.
 
 2 水平格式.    
    120个字符.
    空格是表示紧密关系的控制符.操作符周围加空格,凸显操作数.函数调用括号不
 加空格,表示函数调用的紧密关系.函数调用里面的参数加空格,表示参数的不同.
    在数学运算里面,某块的运算不加,块之间的运算加空格,很好的表明了分别.
    width*rowNum % someNum.
    
 3 缩进 
    缩进,是一种继承结构.而不是大纲结构.
    对于if(a){return b;} 最好还是写成扩展和缩进的格式.
    if (a) {
        return b;
    }
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 */
#endif /* ___h */
