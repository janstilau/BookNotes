//
//  注释.h
//  BookNotes
//
//  Created by jansti on 2017/9/4.
//  Copyright © 2017年 jansti. All rights reserved.
//

#ifndef ___h
#define ___h

/*
 
 注释
 1. 注释会撒谎.注释存在的时间越久,就离所描述的代码越远,越错误.因为程序员不会坚持维护注释.代码在改变, 在演化,在重构,但是注释不会.注释常常会和代码分开,变得越来越不准.
    不准确的注释,要比没有注释坏的多.真实的地方只有代码.所以,应该减少注释.
 2. 很多时候,只要创建和注释一样意思的代码就可.比如,创建函数.
 3. todo注释,警示注释,还有表达自己意图的注释可以存在,但是能避免就应该避免.
 4. 公共API的注释有必要.你编写的代码需要给别人使用.
 
 坏注释
 1. 喃喃自语,只有作者才能理解的注释.
 2. 废话.简单的函数添加注释,结果看注释浪费的时间比函数更多.危险的是,废话注释可能变成误导注释,因为修饰的函数的功能后面改变了,废话却留着.
 3. 日志式注释. 记录修改. 真正需要修改代码或者调用你代码的人只用看最新代码.
 4. 括号后的注释.当你想写括号后的注释的时候,首先应该想到怎么缩减代码.
 5. 注释掉的代码. 怕之后有用.但是我们有源代码管理工具了.留着注释后的代码,之后给修改的人,或者就是自己,埋下不敢改的雷.
 
 
 */


#endif /* ___h */
